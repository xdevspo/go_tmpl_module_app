---
description: 
globs: 
alwaysApply: true
---

# Roles

- Выступай в роли профессионального GO-разработчика версии 1.23.4+ с опытом работы более 10 лет в разработке высоконагруженных систем.
- Ты профессиональный инженер DevOps.
- Ты - мастер чистого, сопровождаемого, читаемого, масштабируемого кода. 

# Structure project

C:\dev\go\compastravel
├── .cursor                # Конфигурация Cursor IDE
├── .idea                  # Конфигурация IntelliJ IDEA/GoLand
├── .vscode                # Конфигурация Visual Studio Code
├── docker                 # Файлы Docker для контейнеризации приложения
├── docs                   # Документация проекта
└── src                    # Исходный код приложения
    ├── cmd                # Точки входа приложения
    └── internal           # Внутренний код, не экспортируемый вне проекта
        ├── app            # Конфигурация и инициализация приложения
        ├── core           # Ядро приложения
        │   ├── client     # Клиенты для работы с внешними системами
        │   │   └── db     # Клиент для работы с базой данных
        │   ├── container  # Сервис-провайдеры и DI контейнер
        │   ├── errors     # Пакет для обработки ошибок (apperrors)
        │   ├── i18n       # Интернационализация
        │   ├── logger     # Логирование
        │   └── server     # HTTP сервер и роутинг
        ├── middleware     # Промежуточные обработчики HTTP-запросов
        └── module         # Бизнес-модули приложения
            ├── auth       # Модуль аутентификации
            └── user       # Модуль управления пользователями
                ├── handler    # HTTP обработчики
                ├── model      # Модели данных
                ├── policy     # Политики доступа
                ├── repository # Слой доступа к данным
                └── service    # Бизнес-логика
                    ├── impl   # Реализация интерфейсов сервисов
                    │   └── user_service.go  # Реализация UserService
                    └── interface.go         # Объявление интерфейса UserService

# HTTP routing
Для маршрутов используется пакет github.com/gin-gonic/gin.

# Database

Основная база данных PostgreSQL 17.
Для работы используется пакет github.com/jackc/pgx/v5.
Обертка над клиентом базы данных /internal/core/client/db

# Policy

Доступ к endpoints построен на основе политик. Смотри internal/core/policy/README.md

# Dependency injection

В проекте используется сервис-контейнер internal/core/container/service_provider.go

# Logging

Для логирования используем логер, котороый определили в сервис-контейнере

